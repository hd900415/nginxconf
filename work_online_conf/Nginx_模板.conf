user nginx;
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 65535;

daemon on;
error_log /data/logs/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    use epoll;
    worker_connections  65535;
}

http {
    # 加载lua库和动态库
    lua_package_path  "/usr/local/openresty/lualib/?.lua;;";
    lua_package_cpath  "/usr/local/openresty/lualib/?.so;;";

    include mime.types;
    default_type application/octet-stream;

    charset utf-8;

    log_format main '$remote_addr - $remote_user [$time_local] '
                    '"$request" $status $body_bytes_sent '
                    '"$http_referer" "$http_user_agent" '
                    '"$http_x_forwarded_for" $host $request_time $upstream_response_time $request_body $scheme';

    log_format main1 '$remote_addr|$remote_user|[$time_local]|$request|'
                     '$status|$body_bytes_sent|$http_referer|'
                     '$http_user_agent|$request_time|$host|$upstream_addr|$request_body|$upstream_response_time';

    log_format lua '$remote_addr|$remote_user|[$time_local]|$request|'
                     '$status|$body_bytes_sent|$http_referer|'
                     '$http_user_agent|$request_time|$host|$upstream_addr|$request_id|$upstream_response_time';

    log_format main2
        '{"@timestamp":"$time_iso8601",'
        '"host":"$hostname",'
        '"server_ip":"$server_addr",'
        '"client_ip":"$http_x_forwarded_for",'
        '"xff":"$http_x_forwarded_for",'
        '"domain":"$host",'
        '"url":"$uri",'
        '"referer":"$http_referer",'
        '"args":"$args",'
        '"upstreamtime":"$upstream_response_time",'
        '"responsetime":"$request_time",'
        '"request_method":"$request_method",'
        '"status":"$status",'
        '"size":"$body_bytes_sent",'
        '"request_body":"$request_body",'
        '"request_length":"$request_length",'
        '"protocol":"$server_protocol",'
        '"upstreamhost":"$upstream_addr",'
        '"file_dir":"$request_filename",'
        '"http_user_agent":"$http_user_agent"'
     '}';

    # 基础优化设置
    server_tokens off;

    sendfile off;
    tcp_nopush on; 
    tcp_nodelay on;

    keepalive_timeout  65;
    keepalive_requests 8192;

    # gzip
    gzip on;
    gzip_min_length 1k;
    gzip_buffers 4 16k;
    gzip_comp_level 3;
    gzip_types text/plain application/javascript  text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/x-httpd-php image/jpeg image/gif image/png;
    gzip_vary on;

    client_body_timeout 600;
    client_header_timeout 600;
    send_timeout 600;
    reset_timedout_connection on;

    client_max_body_size 30m;
    client_body_buffer_size 8192k;

    client_header_buffer_size 16k;
    large_client_header_buffers 8 256k;

    server_names_hash_bucket_size 512;

    proxy_connect_timeout 600;
    proxy_read_timeout 600;
    proxy_send_timeout 600;

    proxy_buffer_size  128k;
    proxy_buffers   8 128k;
    proxy_busy_buffers_size 256k;

    output_buffers 1 32k;
    postpone_output 1460;

    open_file_cache max=65535 inactive=60s;
    open_file_cache_valid    80s;
    open_file_cache_min_uses 1;
    open_file_cache_errors   on;

    # fastcgi set
    fastcgi_ignore_client_abort       on;
    fastcgi_connect_timeout           600;
    fastcgi_send_timeout              600;
    fastcgi_read_timeout              600;
    fastcgi_buffer_size               128k;
    fastcgi_buffers                   8 128k;
    fastcgi_busy_buffers_size         256k;
    fastcgi_temp_file_write_size      256k;

    # fastcgi TEST
    fastcgi_cache_valid 200 302 1h;
    fastcgi_cache_valid 301 1d;
    fastcgi_cache_valid any 1m;
    fastcgi_cache_min_uses 1;
    fastcgi_cache_use_stale error timeout invalid_header http_500;

    real_ip_header X-Forwarded-For;

    # 开启缓存LUA代码(正式环境使用on)
    lua_code_cache off;

    # 允许用户自定义请求头
    underscores_in_headers on;

    # vhost
    include /data/conf/nginx/conf.d/*.conf;


    

    # nginx 使用 geoip配置（此为针对有负载均衡器时获取真实客户端IP）
    map $http_x_forwarded_for $real_ip {
        #~^(\d+\.\d+\.\d+\.\d+) $http_x_forwarded_for;
        #(?P)命名补货
        ~^(?P<firstAddr>[0-9\.]+),?.*$    $firstAddr;
        default $remote_addr;
    }

    # nginx加载使用geoip2数据库
    geoip2 /data/softwares/GeoIP/GeoLite2-City.mmdb {
        $geoip2_data_country_code source=$real_ip country iso_code;
        $geoip2_data_country_name source=$real_ip country names en;
        $geoip2_data_city_name source=$real_ip city names en;
        $geoip2_data_province_name subdivisions 0 names en;
        $geoip2_data_province_isocode subdivisions 0 iso_code;
    }

    # php变量设置
    fastcgi_param COUNTRY_CODE $geoip2_data_country_code;
    fastcgi_param COUNTRY_NAME $geoip2_data_country_name;
    fastcgi_param CITY_NAME    $geoip2_data_city_name;
    fastcgi_param PROVINCE_NMAE $geoip2_data_province_name;
}
##########################################################分割线##############################################

map $http_x_forwarded_for $clientRealIp {
    "" $remote_addr;  
    ~^(?P<firstAddr>[
        0-9\.
    ]+),?.*$ $firstAddr;
}
    
    log_format cdn '$clientRealIp - $remote_user [$time_local] "$request" $status $body_bytes_sent "$http_referer" "$http_user_agent"';  
    #REMOTE_ADDR：节点IP   
    #HTTP_X_FORWARDED_FOR：网民电脑IP,代理IP1,代理IP2   
    #HTTP_X_REAL_FORWARDED_FOR：网民电脑IP   
    #HTTP_X_CONNECTING_IP：代理IP2         
    #防止CC    
    #注意如果采用UA方式识别，要选择非常少见的UA标识，否则会造成误杀。   
    #map $http_user_agent $agent {   
    #default "";   
    #~*X11 $http_user_agent;   
    #~*Ubuntu $http_user_agent;    
    #
}
    
    
    
    map $request_uri $r_agent {  
    default "";  
    ~*home.php\?mod=space&uid $clientRealIp;  
    ~*sec\.baidu\.com $clientRealIp;
}   
    map $http_user_agent $agent {    
    default $r_agent;   
    ~*X11 $clientRealIp;   
    ~*Ubuntu $clientRealIp;    
    ~*bingbot "";   
    ~*yahoo "";   
    ~*Googlebot "";   
    ~*Baiduspider "";    
    ~*Sogou "";   
    ~*360Spider "";
}
   
    #用来限制同一时间连接数，即并发限制   
    名称设定为TotalConnLimitZone   
    limit_conn_zone $agent zone=TotalConnLimitZone: 20m ;    
    limit_conn_log_level notice;
        
    #用来限制单位时间内的请求数，即速率限制,采用的漏桶算法 "leaky bucket"    
    名称设定为ConnLimitZone  
    limit_req_zone $agent zone=ConnLimitZone: 20m rate=10r/s;   
    limit_req_log_level notice;   
    #IP黑名单   
    geo $clientRealIp $banip {    
    default 0;   
    include blockip.conf; #格式 xxx.xxx.xxx.xxx 1;
}   
    server  
    {    
    #记录CC拦截引起的503错误，防止误杀。    
    location ~ /ErrorPages/503\.html$    
    {   
    root /home/wwwroot/lnmp2015/domain/wfun.com/web;   
    access_log /home/wwwroot/lnmp2015/logs/err_503.log cdn; #access_log end combined
    }      
    #识别IP黑名单，禁止访问  
    if ($banip = 1) {   
    return 403;
    }   
    #以下可在伪静态里面设置  
    location ~ .*\.php$  
    {  
    limit_conn TotalConnLimitZone 50; #并发为 50 ，相当于最大开50个线程    
    limit_req zone=ConnLimitZone burst=10 nodelay; #最多 10 个排队， 由于每秒处理 20 个请求 + 10个排队，因此每秒最多刷新30次。
    }   
    #防木马执行   
    location ~ /(attachment|upload|mov|center|static|zone|jkb|000|a\_img)/.*\.(php|php5|PHP|PHP5)?$ {   
    deny all;
    }
}



##############################################分割线
###############################################线上使用##############################################
user  nobody;
worker_processes  4;
worker_cpu_affinity 0001 0010 0100 1000;
#worker_cpu_affinity 0001 0010 0100 1000 1001 1010 1100 1101;   
#worker_cpu_affinity auto;
worker_priority -20;
    worker_rlimit_nofile 65535; 


error_log  logs/error.log;
pid        logs/nginx.pid;

events {
    use epoll;
    worker_connections 100000; 
    multi_accept on;   #允许尽可能接受多的连接  默认值off 建议改为 on
    accept_mutex on;   # 防止被唤醒,从而加重服务器压力,默认值 off 建议改为on
    accept_mutex_delay 10ms;  # 设置获得互斥锁的最少延迟时间。 默认值 500ms
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';


    log_format main_json escape=json '{'
      '"msec": "$msec", ' # request unixtime in seconds with a milliseconds resolution
      '"connection": "$connection", ' # connection serial number
      '"connection_requests": "$connection_requests", ' # number of requests made in connection
      '"pid": "$pid", ' # process pid
      '"request_id": "$request_id", ' # the unique request id
      '"request_length": "$request_length", ' # request length (including headers and body)
      '"remote_addr": "$remote_addr", ' # client IP
      '"remote_user": "$remote_user", ' # client HTTP username
      '"remote_port": "$remote_port", ' # client port
      '"time_local": "$time_local", '
      '"time_iso8601": "$time_iso8601", ' # local time in the ISO 8601 standard format
      '"request": "$request", ' # full path no arguments if the request
      '"request_uri": "$request_uri", ' # full path and arguments if the request
      '"args": "$args", ' # args
      '"status": "$status", ' # response status code
      '"body_bytes_sent": "$body_bytes_sent", ' # the number of body bytes exclude headers sent to a client
      '"bytes_sent": "$bytes_sent", ' # the number of bytes sent to a client
      '"http_referer": "$http_referer", ' # HTTP referer
      '"http_user_agent": "$http_user_agent", ' # user agent
      '"http_x_forwarded_for": "$http_x_forwarded_for", ' # http_x_forwarded_for
      '"http_host": "$http_host", ' # the request Host: header
      '"server_name": "$server_name", ' # the name of the vhost serving the request
      '"request_time": "$request_time", ' # request processing time in seconds with msec resolution
      '"upstream": "$upstream_addr", ' # upstream backend server for proxied requests
      '"upstream_connect_time": "$upstream_connect_time", ' # upstream handshake time incl. TLS
      '"upstream_header_time": "$upstream_header_time", ' # time spent receiving upstream headers
      '"upstream_response_time": "$upstream_response_time", ' # time spend receiving upstream body
      '"upstream_response_length": "$upstream_response_length", ' # upstream response length
      '"upstream_cache_status": "$upstream_cache_status", ' # cache HIT/MISS where applicable
      '"ssl_protocol": "$ssl_protocol", ' # TLS protocol
      '"ssl_cipher": "$ssl_cipher", ' # TLS cipher
      '"scheme": "$scheme", ' # http or https
      '"request_method": "$request_method", ' # request method
      '"server_protocol": "$server_protocol", ' # request protocol, like HTTP/1.1 or HTTP/2.0
      '"pipe": "$pipe", ' # “p” if request was pipelined, “.” otherwise
      '"gzip_ratio": "$gzip_ratio", '
      '"http_cf_ray": "$http_cf_ray"'
 '}';

    access_log  logs/access.log  main_json;

    lua_shared_dict limit 10m;
    lua_package_path "/usr/local/openresty/nginx/conf/waf/?.lua";
    init_by_lua_file "/usr/local/openresty/nginx/conf/waf/init.lua";
    access_by_lua_file "/usr/local/openresty/nginx/conf/waf/access.lua";

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    server_tokens   off; 
    autoindex       off;

    #keepalive_timeout  0;
    keepalive_timeout  65;
    client_header_timeout 60;
    client_body_timeout 10;
    send_timeout 60;
    reset_timedout_connection off;
    limit_conn_zone $binary_remote_addr zone=addr:5m;
    limit_conn addr 100;
    limit_rate 100k;
    charset UTF-8;



    gzip  on;
    gzip_static off; 
    gzip_disable "msie6";
    gzip_proxied any;
    gzip_min_length 1024;
    gzip_comp_level 5;
    gzip_buffers 4 16k;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    open_file_cache max=65535 inactive=30s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
 
    include /usr/local/openresty/nginx/conf/conf.d/*;
    include /usr/local/openresty/nginx/conf/vhost/*.conf;

}